/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var H=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var B=Object.prototype.hasOwnProperty;var N=(t,i)=>{for(var e in i)H(t,e,{get:i[e],enumerable:!0})},_=(t,i,e,d)=>{if(i&&typeof i=="object"||typeof i=="function")for(let r of A(i))!B.call(t,r)&&r!==e&&H(t,r,{get:()=>i[r],enumerable:!(d=P(i,r))||d.enumerable});return t};var O=t=>_(H({},"__esModule",{value:!0}),t);var I={};N(I,{default:()=>b});module.exports=O(I);var o=require("obsidian");function D(t,i){let e=!1;if(i.htmlRegexReplacements&&i.htmlRegexReplacements.length>0)for(let n of i.htmlRegexReplacements)try{let a=new RegExp(n.pattern,"g"),s=t;t=t.replace(a,n.replacement),s!==t&&(e=!0)}catch(a){console.error(`Error applying regex replacement: ${a}`)}let r=new DOMParser().parseFromString(t,"text/html");if(i.stripLineBreaks?(r.querySelectorAll("br").forEach(a=>{a.remove()}),e=!0):r.querySelectorAll("br").forEach(a=>{var p;let s=r.createElement("p");s.className="preserve-line-break",s.setAttribute("data-preserve","true"),s.textContent="\u200B",(p=a.parentNode)==null||p.replaceChild(s,a)}),i.removeEmptyElements){let n=s=>{if(["img","hr","br","input","iframe"].includes(s.tagName.toLowerCase())||s.hasAttribute("data-preserve")||s.textContent&&s.textContent.length>0)return!1;for(let p=0;p<s.children.length;p++)if(!n(s.children[p]))return!1;return!0},a=!0;for(;a&&(a=!1,r.querySelectorAll("p:not([data-preserve]), div, span, li, ul, ol, table, tr, td, th").forEach(p=>{n(p)&&(p.remove(),a=!0,e=!0)}),!!a););}return{html:new XMLSerializer().serializeToString(r.body),appliedTransformations:e}}function $(t,i,e=0,d=!1){let r=!1;if(i.markdownRegexReplacements&&i.markdownRegexReplacements.length>0)for(let n of i.markdownRegexReplacements)try{let a=new RegExp(n.pattern,"g"),s=t;t=t.replace(a,n.replacement),s!==t&&(r=!0)}catch(a){console.error(`Error applying markdown regex replacement: ${a}`)}if(d){let n=t;t=t.replace(/^(#{1,6}\s)/gm,"\\$1").replace(/(\*\*|__|\*|_)/g,"\\$1").replace(/^(\s*[-+*]\s)/gm,"\\$1").replace(/^(\s*\d+\.\s)/gm,"\\$1").replace(/(!?\[)/g,"\\$1").replace(/(`{1,3})/g,"\\$1").replace(/^(\s*>\s)/gm,"\\$1").replace(/^(\s*[-*_]{3,}\s*)$/gm,"\\$1").replace(/(\|)/g,"\\$1").replace(/^(\s*- \[ \])/gm,"\\$1").replace(/(`.*?`)|(<\/?[a-z][^>]*>)/gi,(a,s,p)=>s||(p?"`"+p+"`":a)),r=n!==t}else{let n=/^(#{1,6})\s/gm;if(i.contextualCascade&&e>0){let a=-1,s=!1;t=t.replace(n,(p,v)=>{let m=v.length,g=m;return s?(g=Math.min(m+a,6),console.log(`contextual cascade: delta ${a}`)):m<=e&&(g=Math.min(e+1,6),a=g-m,s=!0,console.log(`contextual cascade initiated: delta: ${a}`)),console.log(`result: current level: ${m}, new level: ${g}`),r=g!==m,"#".repeat(g)+" "})}else if(i.maxHeadingLevel>1){let a=-1,s=!1;t=t.replace(n,(p,v)=>{let m=v.length,g=m;return i.cascadeHeadingLevels?s?(g=Math.min(m+a,6),console.log(`cascading: delta: ${a}`)):m<i.maxHeadingLevel&&(g=i.maxHeadingLevel,a=g-m,s=!0,console.log(`cascade initiated: delta: ${a}`)):g=Math.max(m,i.maxHeadingLevel),console.log(`result: current level: ${m}, new level: ${g}`),r=g!==m,"#".repeat(g)+" "})}}if(!i.stripLineBreaks){let n="___LINE_BREAK_PLACEHOLDER___";if(t=t.replace(/<p class="preserve-line-break"[^>]*>.*?<\/p>/g,n),t=t.replace(/<p data-preserve="true"[^>]*>.*?<\/p>/g,n),i.removeEmptyLines){t=t.replace(/\r\n/g,`
`);let s=t.split(`
`).filter(v=>v.trim()!==""||v.includes(n)),p=t;t=s.join(`
`),r=p!==t}t=t.replace(new RegExp(n,"g"),`
`)}else if(i.removeEmptyLines){t=t.replace(/\r\n/g,`
`);let a=t.split(`
`).filter(p=>p.trim()!==""),s=t;t=a.join(`
`),r=s!==t}return{markdown:t,appliedTransformations:r}}var V={pasteOverride:!0,maxHeadingLevel:1,removeEmptyElements:!1,cascadeHeadingLevels:!0,contextualCascade:!0,stripLineBreaks:!1,removeEmptyLines:!1,htmlRegexReplacements:[],markdownRegexReplacements:[]},b=class extends o.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new k(this.app,this)),this.registerEvent(this.app.workspace.on("editor-paste",e=>this.onPaste(e))),this.addCommand({id:"reformat-and-paste",name:"Reformat and Paste",callback:async()=>{try{let e=await this.getClipboardData();e?this.doPaste(e):new o.Notice("Clipboard does not contain HTML or plain text content.")}catch(e){console.error("Error accessing clipboard:",e),new o.Notice("Error accessing clipboard. Try using regular paste instead.")}}}),this.addCommand({id:"paste-with-escaped-markdown",name:"Paste with Escaped Markdown",callback:async()=>{let e=await this.getClipboardData();e?this.doPaste(e,!0):new o.Notice("Clipboard does not contain HTML or plain text content.")}})}onunload(){}async loadSettings(){this.settings=Object.assign({},V,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async getClipboardData(){try{let e=await navigator.clipboard.read(),d=new DataTransfer;for(let r of e){if(r.types.includes("text/html")){let n=await(await r.getType("text/html")).text();d.setData("text/html",n)}if(r.types.includes("text/plain")){let n=await(await r.getType("text/plain")).text();d.setData("text/plain",n)}}if(d.types.includes("text/html")||d.types.includes("text/plain"))return d;new o.Notice("Clipboard does not contain HTML or plain text content.")}catch(e){console.error("Error accessing clipboard:",e),new o.Notice("Error accessing clipboard. Try using regular paste instead.")}return null}doPaste(e,d=!1){let r=this.app.workspace.getActiveViewOfType(o.MarkdownView);if(!r)return!1;let f=r.editor;if(!f)return!1;try{let n="",a=!1,s=!1;if(e.types.includes("text/html")){let m=e.getData("text/html"),g=D(m,this.settings);console.debug(`Original HTML: ${m}`),console.debug(`Transformed HTML: ${g.html}`),n=(0,o.htmlToMarkdown)(g.html),a=g.appliedTransformations}else if(e.types.includes("text/plain"))n=e.getData("text/plain");else return console.debug("No HTML or plain text content found in clipboard"),!1;let p=0;this.settings.contextualCascade&&(p=this.getCurrentHeadingLevel(f));let v=$(n,this.settings,p,d);return s=v.appliedTransformations,a||s?(f.replaceSelection(v.markdown),new o.Notice("Reformatted pasted content"),!0):!1}catch(n){return console.error("Error processing paste content:",n),new o.Notice("Error processing paste content"),!1}}onPaste(e){if(this.settings.pasteOverride){let d=e.clipboardData;if(!d)return;this.doPaste(d)?(console.debug("Default paste behavior overridden by Paste Reformatter plugin"),e.preventDefault()):console.debug("Paste Reformatter plugin did not handle paste, allowing default behavior")}}getCurrentHeadingLevel(e){let r=e.getCursor().line;for(let f=r;f>=0;f--){let a=e.getLine(f).match(/^(#{1,6})\s/);if(a)return a[1].length}return 0}},k=class extends o.PluginSettingTab{constructor(e,d){super(e,d);this.plugin=d}display(){let{containerEl:e}=this;e.empty(),new o.Setting(e).setName("Override default paste behavior").setDesc("Alter the behavior of the default paste action to reformat pasted content.").addToggle(c=>c.setValue(this.plugin.settings.pasteOverride).onChange(async l=>{this.plugin.settings.pasteOverride=l,await this.plugin.saveSettings()})),new o.Setting(e).setName("HTML transformations").setHeading().setDesc("Control how the HTML content is processed before being converted to Markdown."),new o.Setting(e).setName("Remove empty elements").setDesc("Remove empty elements when reformatting pasted content").addToggle(c=>c.setValue(this.plugin.settings.removeEmptyElements).onChange(async l=>{this.plugin.settings.removeEmptyElements=l,await this.plugin.saveSettings()})),new o.Setting(e).setName("Strip hard line breaks").setDesc("Remove line breaks (br tags) when reformatting pasted content").addToggle(c=>c.setValue(this.plugin.settings.stripLineBreaks).onChange(async l=>{this.plugin.settings.stripLineBreaks=l,await this.plugin.saveSettings()})),new o.Setting(e).setName("HTML regex replacements").setDesc("Apply regular expression replacements to the HTML content before converting to Markdown. You can use $1, $2, etc. to reference capture groups.").addButton(c=>{c.setButtonText("Add replacement").setCta().onClick(()=>{this.plugin.settings.htmlRegexReplacements.some(x=>x.pattern===""&&x.replacement==="")||(this.plugin.settings.htmlRegexReplacements.push({pattern:"",replacement:""}),this.plugin.saveSettings().then(()=>{this.display()}))})});let d=e.createDiv();d.addClass("regex-replacements-container");let r=d.createEl("table");r.addClass("regex-table");let n=r.createEl("thead").createEl("tr"),a=n.createEl("th");a.setText("Pattern"),a.addClass("regex-th"),a.addClass("regex-th-pattern");let s=n.createEl("th");s.setText("Replacement"),s.addClass("regex-th"),s.addClass("regex-th-replacement");let p=n.createEl("th");p.addClass("regex-th"),p.addClass("regex-th-actions");let v=r.createEl("tbody");if(this.plugin.settings.htmlRegexReplacements.forEach((c,l)=>{let x=v.createEl("tr"),w=x.createEl("td");w.addClass("regex-td");let h=document.createElement("input");h.type="text",h.value=c.pattern,h.placeholder="Regular expression pattern",h.addClass("regex-input"),h.addEventListener("change",async()=>{this.plugin.settings.htmlRegexReplacements[l].pattern=h.value,await this.plugin.saveSettings()}),w.appendChild(h);let y=x.createEl("td");y.addClass("regex-td");let u=document.createElement("input");u.type="text",u.value=c.replacement,u.placeholder="Replacement value (can use $1, $2, etc.)",u.addClass("regex-input"),u.addEventListener("change",async()=>{this.plugin.settings.htmlRegexReplacements[l].replacement=u.value,await this.plugin.saveSettings()}),y.appendChild(u);let R=x.createEl("td");R.addClass("regex-td"),R.addClass("regex-td-actions");let E=document.createElement("button");E.textContent="Remove",E.addEventListener("click",async()=>{this.plugin.settings.htmlRegexReplacements.splice(l,1),await this.plugin.saveSettings(),this.display()}),R.appendChild(E)}),this.plugin.settings.htmlRegexReplacements.length===0){let l=v.createEl("tr").createEl("td");l.colSpan=3,l.addClass("regex-empty-message"),l.setText('No replacements defined. Click "Add replacement" to add one.')}new o.Setting(e).setName("Markdown transformations").setDesc("Control how the Markdown content is adjusted after HTML conversion or when pasted as plain text.").setHeading(),new o.Setting(e).setName("Max heading level").setDesc("The maximum heading level to allow when reformatting pasted content (H1 is treated as disabled)").addDropdown(c=>c.addOptions({1:"Disabled (H1)",2:"H2",3:"H3",4:"H4",5:"H5",6:"H6"}).setValue(this.plugin.settings.maxHeadingLevel.toString()).onChange(async l=>{this.plugin.settings.maxHeadingLevel=parseInt(l),await this.plugin.saveSettings(),this.display()})),this.plugin.settings.maxHeadingLevel>1&&new o.Setting(e).setName("Cascade heading levels").setDesc("Preserve the heading hierarchy by cascading levels (e.g., H1\u2192H2\u2192H3 becomes H2\u2192H3\u2192H4 when max level is H2)").addToggle(c=>c.setValue(this.plugin.settings.cascadeHeadingLevels).onChange(async l=>{this.plugin.settings.cascadeHeadingLevels=l,await this.plugin.saveSettings()})),new o.Setting(e).setName("Contextual cascade").setDesc("Cascade headings based on the current context (e.g., if cursor is in an H2 section, headings will start from H3)").addToggle(c=>c.setValue(this.plugin.settings.contextualCascade).onChange(async l=>{this.plugin.settings.contextualCascade=l,await this.plugin.saveSettings()})),new o.Setting(e).setName("Remove empty lines").setDesc("Remove blank lines in the Markdown output").addToggle(c=>c.setValue(this.plugin.settings.removeEmptyLines).onChange(async l=>{this.plugin.settings.removeEmptyLines=l,await this.plugin.saveSettings()})),new o.Setting(e).setName("Markdown regex replacements").setDesc("Apply regular expression replacements to the Markdown content after HTML conversion. You can use $1, $2, etc. to reference capture groups.").addButton(c=>{c.setButtonText("Add replacement").setCta().onClick(()=>{this.plugin.settings.markdownRegexReplacements.some(x=>x.pattern===""&&x.replacement==="")||(this.plugin.settings.markdownRegexReplacements.push({pattern:"",replacement:""}),this.plugin.saveSettings().then(()=>{this.display()}))})});let m=e.createDiv();m.addClass("regex-replacements-container");let g=m.createEl("table");g.addClass("regex-table");let C=g.createEl("thead").createEl("tr"),L=C.createEl("th");L.setText("Pattern"),L.addClass("regex-th"),L.addClass("regex-th-pattern");let T=C.createEl("th");T.setText("Replacement"),T.addClass("regex-th"),T.addClass("regex-th-replacement");let M=C.createEl("th");M.addClass("regex-th"),M.addClass("regex-th-actions");let S=g.createEl("tbody");if(this.plugin.settings.markdownRegexReplacements.forEach((c,l)=>{let x=S.createEl("tr"),w=x.createEl("td");w.addClass("regex-td");let h=document.createElement("input");h.type="text",h.value=c.pattern,h.placeholder="Regular expression pattern",h.addClass("regex-input"),h.addEventListener("change",async()=>{this.plugin.settings.markdownRegexReplacements[l].pattern=h.value,await this.plugin.saveSettings()}),w.appendChild(h);let y=x.createEl("td");y.addClass("regex-td");let u=document.createElement("input");u.type="text",u.value=c.replacement,u.placeholder="Replacement value (can use $1, $2, etc.)",u.addClass("regex-input"),u.addEventListener("change",async()=>{this.plugin.settings.markdownRegexReplacements[l].replacement=u.value,await this.plugin.saveSettings()}),y.appendChild(u);let R=x.createEl("td");R.addClass("regex-td"),R.addClass("regex-td-actions");let E=document.createElement("button");E.textContent="Remove",E.addEventListener("click",async()=>{this.plugin.settings.markdownRegexReplacements.splice(l,1),await this.plugin.saveSettings(),this.display()}),R.appendChild(E)}),this.plugin.settings.markdownRegexReplacements.length===0){let l=S.createEl("tr").createEl("td");l.colSpan=3,l.addClass("regex-empty-message"),l.setText('No replacements defined. Click "Add replacement" to add one.')}}};

/* nosourcemap */