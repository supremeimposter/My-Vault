/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var H=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var $=Object.getOwnPropertyNames;var N=Object.prototype.hasOwnProperty;var P=(t,s)=>{for(var a in s)H(t,a,{get:s[a],enumerable:!0})},V=(t,s,a,i)=>{if(s&&typeof s=="object"||typeof s=="function")for(let m of $(s))!N.call(t,m)&&m!==a&&H(t,m,{get:()=>s[m],enumerable:!(i=B(s,m))||i.enumerable});return t};var _=t=>V(H({},"__esModule",{value:!0}),t);var O={};P(O,{default:()=>y});module.exports=_(O);var p=require("obsidian");function D(t,s){if(s.htmlRegexReplacements&&s.htmlRegexReplacements.length>0)for(let n of s.htmlRegexReplacements)try{let e=new RegExp(n.pattern,"g");t=t.replace(e,n.replacement)}catch(e){console.error(`Error applying regex replacement: ${e}`)}let i=new DOMParser().parseFromString(t,"text/html");if(s.stripLineBreaks?i.querySelectorAll("br").forEach(e=>{e.remove()}):i.querySelectorAll("br").forEach(e=>{var o;let l=i.createElement("p");l.className="preserve-line-break",l.setAttribute("data-preserve","true"),l.textContent="\u200B",(o=e.parentNode)==null||o.replaceChild(l,e)}),s.removeEmptyElements){let n=l=>{if(["img","hr","br","input","iframe"].includes(l.tagName.toLowerCase())||l.hasAttribute("data-preserve")||l.textContent&&l.textContent.trim().length>0)return!1;for(let o=0;o<l.children.length;o++)if(!n(l.children[o]))return!1;return!0},e=!0;for(;e&&(e=!1,i.querySelectorAll("p:not([data-preserve]), div, span, li, ul, ol, table, tr, td, th").forEach(o=>{n(o)&&(o.remove(),e=!0)}),!!e););}return new XMLSerializer().serializeToString(i.body)}function A(t,s,a=0){if(s.markdownRegexReplacements&&s.markdownRegexReplacements.length>0)for(let n of s.markdownRegexReplacements)try{let e=new RegExp(n.pattern,"g");t=t.replace(e,n.replacement)}catch(e){console.error(`Error applying markdown regex replacement: ${e}`)}let i=/^(#{1,6})\s/gm;if(s.contextualCascade&&a>0){let n=-1,e=!1;t=t.replace(i,(l,o)=>{let d=o.length,g=d;return e?(g=Math.min(d+n,6),console.log(`contextual cascade: delta ${n}`)):d<=a&&(g=Math.min(a+1,6),n=g-d,e=!0,console.log(`contextual cascade initiated: delta: ${n}`)),console.log(`result: current level: ${d}, new level: ${g}`),"#".repeat(g)+" "})}else if(s.maxHeadingLevel>1){let n=-1,e=!1;t=t.replace(i,(l,o)=>{let d=o.length,g=d;return s.cascadeHeadingLevels?e?(g=Math.min(d+n,6),console.log(`cascading: delta: ${n}`)):d<s.maxHeadingLevel&&(g=s.maxHeadingLevel,n=g-d,e=!0,console.log(`cascade initiated: delta: ${n}`)):g=Math.max(d,s.maxHeadingLevel),console.log(`result: current level: ${d}, new level: ${g}`),"#".repeat(g)+" "})}if(!s.stripLineBreaks){let n="___LINE_BREAK_PLACEHOLDER___";t=t.replace(/<p class="preserve-line-break"[^>]*>.*?<\/p>/g,n),t=t.replace(/<p data-preserve="true"[^>]*>.*?<\/p>/g,n),s.removeEmptyLines&&(t=t.replace(/\r\n/g,`
`),t=t.split(`
`).filter(o=>o.trim()!==""||o.includes(n)).join(`
`)),t=t.replace(new RegExp(n,"g"),`
`)}else s.removeEmptyLines&&(t=t.replace(/\r\n/g,`
`),t=t.split(`
`).filter(l=>l.trim()!=="").join(`
`));return t}var I={maxHeadingLevel:1,removeEmptyElements:!1,cascadeHeadingLevels:!0,contextualCascade:!0,stripLineBreaks:!1,removeEmptyLines:!1,htmlRegexReplacements:[],markdownRegexReplacements:[]},y=class extends p.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new k(this.app,this)),this.registerEvent(this.app.workspace.on("editor-paste",a=>this.onPaste(a)))}onunload(){}async loadSettings(){this.settings=Object.assign({},I,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}onPaste(a){let i=a.clipboardData;if(!i)return;let m=this.app.workspace.getActiveViewOfType(p.MarkdownView);if(!m)return;let n=m.editor;if(n)try{let e="",l="";if(i.types.includes("text/html")){let d=i.getData("text/html"),g=D(d,this.settings);e=(0,p.htmlToMarkdown)(g),l="HTML"}else if(i.types.includes("text/plain"))e=i.getData("text/plain"),l="plain text";else return;let o=0;this.settings.contextualCascade&&(o=this.getCurrentHeadingLevel(n)),e=A(e,this.settings,o),n.replaceSelection(e),a.preventDefault(),new p.Notice(`Reformatted ${l} content`)}catch(e){console.error("Error processing paste content:",e),new p.Notice("Error processing paste content")}}getCurrentHeadingLevel(a){let m=a.getCursor().line;for(let n=m;n>=0;n--){let l=a.getLine(n).match(/^(#{1,6})\s/);if(l)return l[1].length}return 0}},k=class extends p.PluginSettingTab{constructor(a,i){super(a,i);this.plugin=i}display(){let{containerEl:a}=this;a.empty(),new p.Setting(a).setName("HTML transformations").setHeading().setDesc("Control how the HTML content is processed before being converted to Markdown."),new p.Setting(a).setName("Remove empty elements").setDesc("Remove empty elements when reformatting pasted content").addToggle(c=>c.setValue(this.plugin.settings.removeEmptyElements).onChange(async r=>{this.plugin.settings.removeEmptyElements=r,await this.plugin.saveSettings()})),new p.Setting(a).setName("Strip hard line breaks").setDesc("Remove line breaks (br tags) when reformatting pasted content").addToggle(c=>c.setValue(this.plugin.settings.stripLineBreaks).onChange(async r=>{this.plugin.settings.stripLineBreaks=r,await this.plugin.saveSettings()})),new p.Setting(a).setName("HTML regex replacements").setDesc("Apply regular expression replacements to the HTML content before converting to Markdown. You can use $1, $2, etc. to reference capture groups.").addButton(c=>{c.setButtonText("Add replacement").setCta().onClick(()=>{this.plugin.settings.htmlRegexReplacements.some(x=>x.pattern===""&&x.replacement==="")||(this.plugin.settings.htmlRegexReplacements.push({pattern:"",replacement:""}),this.plugin.saveSettings().then(()=>{this.display()}))})});let i=a.createDiv();i.addClass("regex-replacements-container");let m=i.createEl("table");m.addClass("regex-table");let e=m.createEl("thead").createEl("tr"),l=e.createEl("th");l.setText("Pattern"),l.addClass("regex-th"),l.addClass("regex-th-pattern");let o=e.createEl("th");o.setText("Replacement"),o.addClass("regex-th"),o.addClass("regex-th-replacement");let d=e.createEl("th");d.addClass("regex-th"),d.addClass("regex-th-actions");let g=m.createEl("tbody");if(this.plugin.settings.htmlRegexReplacements.forEach((c,r)=>{let x=g.createEl("tr"),E=x.createEl("td");E.addClass("regex-td");let h=document.createElement("input");h.type="text",h.value=c.pattern,h.placeholder="Regular expression pattern",h.addClass("regex-input"),h.addEventListener("change",async()=>{this.plugin.settings.htmlRegexReplacements[r].pattern=h.value,await this.plugin.saveSettings()}),E.appendChild(h);let f=x.createEl("td");f.addClass("regex-td");let u=document.createElement("input");u.type="text",u.value=c.replacement,u.placeholder="Replacement value (can use $1, $2, etc.)",u.addClass("regex-input"),u.addEventListener("change",async()=>{this.plugin.settings.htmlRegexReplacements[r].replacement=u.value,await this.plugin.saveSettings()}),f.appendChild(u);let v=x.createEl("td");v.addClass("regex-td"),v.addClass("regex-td-actions");let R=document.createElement("button");R.textContent="Remove",R.addEventListener("click",async()=>{this.plugin.settings.htmlRegexReplacements.splice(r,1),await this.plugin.saveSettings(),this.display()}),v.appendChild(R)}),this.plugin.settings.htmlRegexReplacements.length===0){let r=g.createEl("tr").createEl("td");r.colSpan=3,r.addClass("regex-empty-message"),r.setText('No replacements defined. Click "Add replacement" to add one.')}new p.Setting(a).setName("Markdown transformations").setDesc("Control how the Markdown content is adjusted after HTML conversion or when pasted as plain text.").setHeading(),new p.Setting(a).setName("Max heading level").setDesc("The maximum heading level to allow when reformatting pasted content (H1 is treated as disabled)").addDropdown(c=>c.addOptions({1:"Disabled (H1)",2:"H2",3:"H3",4:"H4",5:"H5",6:"H6"}).setValue(this.plugin.settings.maxHeadingLevel.toString()).onChange(async r=>{this.plugin.settings.maxHeadingLevel=parseInt(r),await this.plugin.saveSettings(),this.display()})),this.plugin.settings.maxHeadingLevel>1&&new p.Setting(a).setName("Cascade heading levels").setDesc("Preserve the heading hierarchy by cascading levels (e.g., H1\u2192H2\u2192H3 becomes H2\u2192H3\u2192H4 when max level is H2)").addToggle(c=>c.setValue(this.plugin.settings.cascadeHeadingLevels).onChange(async r=>{this.plugin.settings.cascadeHeadingLevels=r,await this.plugin.saveSettings()})),new p.Setting(a).setName("Contextual cascade").setDesc("Cascade headings based on the current context (e.g., if cursor is in an H2 section, headings will start from H3)").addToggle(c=>c.setValue(this.plugin.settings.contextualCascade).onChange(async r=>{this.plugin.settings.contextualCascade=r,await this.plugin.saveSettings()})),new p.Setting(a).setName("Remove empty lines").setDesc("Remove blank lines in the Markdown output").addToggle(c=>c.setValue(this.plugin.settings.removeEmptyLines).onChange(async r=>{this.plugin.settings.removeEmptyLines=r,await this.plugin.saveSettings()})),new p.Setting(a).setName("Markdown regex replacements").setDesc("Apply regular expression replacements to the Markdown content after HTML conversion. You can use $1, $2, etc. to reference capture groups.").addButton(c=>{c.setButtonText("Add replacement").setCta().onClick(()=>{this.plugin.settings.markdownRegexReplacements.some(x=>x.pattern===""&&x.replacement==="")||(this.plugin.settings.markdownRegexReplacements.push({pattern:"",replacement:""}),this.plugin.saveSettings().then(()=>{this.display()}))})});let T=a.createDiv();T.addClass("regex-replacements-container");let C=T.createEl("table");C.addClass("regex-table");let w=C.createEl("thead").createEl("tr"),L=w.createEl("th");L.setText("Pattern"),L.addClass("regex-th"),L.addClass("regex-th-pattern");let b=w.createEl("th");b.setText("Replacement"),b.addClass("regex-th"),b.addClass("regex-th-replacement");let S=w.createEl("th");S.addClass("regex-th"),S.addClass("regex-th-actions");let M=C.createEl("tbody");if(this.plugin.settings.markdownRegexReplacements.forEach((c,r)=>{let x=M.createEl("tr"),E=x.createEl("td");E.addClass("regex-td");let h=document.createElement("input");h.type="text",h.value=c.pattern,h.placeholder="Regular expression pattern",h.addClass("regex-input"),h.addEventListener("change",async()=>{this.plugin.settings.markdownRegexReplacements[r].pattern=h.value,await this.plugin.saveSettings()}),E.appendChild(h);let f=x.createEl("td");f.addClass("regex-td");let u=document.createElement("input");u.type="text",u.value=c.replacement,u.placeholder="Replacement value (can use $1, $2, etc.)",u.addClass("regex-input"),u.addEventListener("change",async()=>{this.plugin.settings.markdownRegexReplacements[r].replacement=u.value,await this.plugin.saveSettings()}),f.appendChild(u);let v=x.createEl("td");v.addClass("regex-td"),v.addClass("regex-td-actions");let R=document.createElement("button");R.textContent="Remove",R.addEventListener("click",async()=>{this.plugin.settings.markdownRegexReplacements.splice(r,1),await this.plugin.saveSettings(),this.display()}),v.appendChild(R)}),this.plugin.settings.markdownRegexReplacements.length===0){let r=M.createEl("tr").createEl("td");r.colSpan=3,r.addClass("regex-empty-message"),r.setText('No replacements defined. Click "Add replacement" to add one.')}}};

/* nosourcemap */